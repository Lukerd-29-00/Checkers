{"version":3,"sources":["Checkers/components/CheckersSquare.tsx","Checkers/components/CheckersBoard.tsx","Checkers/hooks/UseSquares.ts","Checkers/components/CheckersDashboard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CheckersSquare","props","deselect","square","position","row","startingSquare","col","firstMove","moving","moves","length","className","highlighted","color","onClick","selectStartingSquare","selectSquare","selectPiece","setFirstMove","move","destination","piece","movePiece","selectedPiece","king","newPiece","newSquare","endsTurn","endTurn","disabled","redsTurn","child","getAdjacentSquares","board","up","down","upanddown","concat","sqs","Array","undefined","Error","output","pos","push","getAdjacentEnemyPieces","filter","sq","getAdjacentEmptySquares","CheckersBoard","useState","newRow","pieceColor","squares","updateSquares","start","newSquares","deletes","redscanmove","blackscanmove","enemySquare","targetSquares","highlight","useSquares","setSquaresHighlighted","selectedSquare","setSelectedSquare","setRedsTurn","isFirstMove","setIsFirstMove","setStartingSquare","winner","setWinner","allSquares","i","Math","floor","redTurn","map","empty","place","rowIndex","CheckersDashboard","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAiBO,SAASA,EAAeC,GAAoB,IAAD,IACxCC,EAAWD,EAAME,OAAOC,SAASC,OAAtB,UAA8BJ,EAAMK,sBAApC,aAA8B,EAAsBF,SAASC,MAAOJ,EAAME,OAAOC,SAASG,OAAtB,UAA8BN,EAAMK,sBAApC,aAA8B,EAAsBF,SAASG,MAAON,EAAMO,UACzJC,EAAkBR,EAAMS,MAAMC,OAAS,EAiD7C,OACQ,wBAAQ,cAAY,kBAAkBC,UAAWX,EAAME,OAAOU,YAAc,qBAA8C,UAAvBZ,EAAME,OAAOW,MAAoB,cAAgB,SAAUC,QAjDtJ,WACZ,GAAGb,EACCD,EAAMe,qBAAqB,MAC3Bf,EAAMgB,aAAa,MACnBhB,EAAMiB,YAAY,MAClBjB,EAAMkB,cAAa,QAElB,GAAGV,EAAO,CAAC,IAAD,gBACOR,EAAMS,OADb,IACX,IAAI,EAAJ,qBAA8B,CAAC,IAArBU,EAAoB,QAC1B,GAAGA,EAAKC,YAAYjB,SAASC,MAAQJ,EAAME,OAAOC,SAASC,KAAOe,EAAKC,YAAYjB,SAASG,MAAQN,EAAME,OAAOC,SAASG,IACtH,GAA8B,OAA3Ba,EAAKC,YAAYC,MAAe,CAG/B,GAFArB,EAAMsB,UAAUH,GAChBnB,EAAMkB,cAAa,GACkB,IAAlCC,EAAKC,YAAYjB,SAASC,KAAsD,QAAxCJ,EAAMuB,cAAwBV,OAAqBb,EAAMuB,cAAwBC,KAOvH,GAAqC,IAAlCL,EAAKC,YAAYjB,SAASC,KAAsD,UAAxCJ,EAAMuB,cAAwBV,OAAuBb,EAAMuB,cAAwBC,KAQ/HxB,EAAMgB,aAAaG,EAAKC,aACxBpB,EAAMe,qBAAqBI,EAAKC,iBAToG,CACpI,IAAMK,EAAW,CAACZ,MAAQ,QAA4BW,MAAM,GACtDE,EAAY,CAACvB,SAAUgB,EAAKC,YAAYjB,SAAUU,MAAOM,EAAKC,YAAYP,MAAOD,YAAaO,EAAKC,YAAYR,YAAaS,MAAOI,GACzIzB,EAAMe,qBAAqBW,GAC3B1B,EAAMiB,YAAYQ,GAClBzB,EAAMgB,aAAaU,OAZ0G,CAC7H,IAAMD,EAAW,CAACZ,MAAQ,MAA0BW,MAAM,GACpDE,EAAY,CAACvB,SAAUgB,EAAKC,YAAYjB,SAAUU,MAAOM,EAAKC,YAAYP,MAAOD,YAAaO,EAAKC,YAAYR,YAAaS,MAAOI,GACzIzB,EAAMe,qBAAqBW,GAC3B1B,EAAMiB,YAAYQ,GAClBzB,EAAMgB,aAAaU,GAapBP,EAAKQ,UACJ3B,EAAM4B,eAKV5B,EAAMgB,aAAahB,EAAME,SA9B1B,oCAoCXF,EAAMe,qBAAqBf,EAAME,QACjCF,EAAMgB,aAAahB,EAAME,QACzBF,EAAMiB,YAAYjB,EAAME,OAAOmB,QAIiJQ,SAAUrB,GAAUP,IAAaD,EAAME,OAAOU,cAAuC,OAAvBZ,EAAME,OAAOmB,QAAoBrB,EAAM8B,UAAyC,QAA7B9B,EAAME,OAAOmB,MAAMR,QAAsBb,EAAM8B,UAAyC,UAA7B9B,EAAME,OAAOmB,MAAMR,QAA/W,SAAsab,EAAM+B,OAAlC/B,EAAME,OAAOC,SAASG,KCrC5a,SAAS0B,EAAmB9B,EAAgB+B,EAA6BZ,GACrE,IAAMa,EAAK,CAAC,CAAC9B,IAAKF,EAAOC,SAASC,IAAI,EAAEE,IAAIJ,EAAOC,SAASG,IAAI,GAAG,CAACF,IAAIF,EAAOC,SAASC,IAAI,EAAEE,IAAIJ,EAAOC,SAASG,IAAI,IAChH6B,EAAO,CAAC,CAAC/B,IAAKF,EAAOC,SAASC,IAAI,EAAEE,IAAIJ,EAAOC,SAASG,IAAI,GAAG,CAACF,IAAIF,EAAOC,SAASC,IAAI,EAAEE,IAAKJ,EAAOC,SAASG,IAAI,IACnH8B,EAAYF,EAAGG,OAAOF,GACxBG,EAAM,IAAIC,MACd,QAAaC,IAAVnB,GAAwC,OAAjBnB,EAAOmB,MAC7B,MAAMoB,MAAM,oCAEED,IAAVnB,IACJA,EAASnB,EAAOmB,OAEpB,IAAIqB,EAAS,IAAIH,MAEbD,EADDjB,EAAMG,KACCY,EAEc,QAAhBf,EAAMR,MACJqB,EAGAC,EAnBwF,oBAqBjFG,GArBiF,IAqBlG,IAAI,EAAJ,qBAAqB,CAAC,IAAZK,EAAW,QACdA,EAAIvC,KAAO,GAAKuC,EAAIvC,KAAO,GAAKuC,EAAIrC,KAAO,GAAKqC,EAAIrC,KAAO,GAC1DoC,EAAOE,KAAKX,EAAMU,EAAIvC,KAAKuC,EAAIrC,OAvB2D,8BA0BlG,OAAOoC,EAGJ,SAASG,EAAuB3C,EAAsB+B,EAA4BZ,GACrF,GAAc,OAAXnB,EACC,MAAO,GAEN,GAAoB,OAAjBA,EAAOmB,YAA4BmB,IAAVnB,EAC7B,MAAMoB,MAAM,qBAKhB,YAHkBD,IAAVnB,IACJA,EAASnB,EAAOmB,OAEbW,EAAmB9B,EAAO+B,EAAMZ,GAAOyB,QAAO,SAACC,GAClD,OAAoB,OAAbA,EAAG1B,OAAkB0B,EAAG1B,MAAMR,QAAWQ,EAAgBR,SAIjE,SAASmC,EAAwB9C,EAAuB+B,EAA4BZ,GACvF,OAAa,MAAVnB,GAAmC,OAAjBA,EAAOmB,MACjB,GAEJW,EAAmB9B,EAAO+B,EAAMZ,GAAOyB,QAAO,SAACC,GAClD,OAAoB,OAAbA,EAAG1B,SAIX,SAAS4B,EAAcjD,GAC1B,MCnFG,WAEH,IA4BA,EAAiCkD,oBA5BhB,WAGb,IAFA,IAAIR,EAAS,IAAIH,MAAqB,GAE9BnC,EAAM,EAAEA,EAAM,EAAEA,IAAM,CAE1B,IADA,IAAI+C,EAAS,IAAIZ,MAAc,GACvBjC,EAAM,EAAEA,EAAM,EAAEA,IAAM,CAC1B,IAAIO,EAA2BT,EAAM,IAAME,EAAM,EAAI,QAAU,QAC3D8C,EAA8B,MAClC,GAAGhD,EAAM,EAAE,CACPgD,EAAa,QACb,IAAI/B,EAAkB,UAAVR,EAAoB,CAACA,MAAOuC,EAAY5B,MAAM,GAAS,KACnE2B,EAAO7C,GAAQ,CAACH,SAAU,CAACC,IAAKA,EAAIE,IAAKA,GAAKe,MAAOA,EAAMR,MAAOA,EAAMD,aAAa,QAEpF,GAAGR,EAAM,EAAE,CACZ,IAAIiB,EAAkB,UAAVR,EAAoB,CAACA,MAAOuC,EAAY5B,MAAM,GAAS,KACnE2B,EAAO7C,GAAQ,CAACH,SAAU,CAACC,IAAKA,EAAIE,IAAKA,GAAKe,MAAOA,EAAMR,MAAOA,EAAMD,aAAa,QAGrFuC,EAAO7C,GAAQ,CAACH,SAAU,CAACC,IAAKA,EAAIE,IAAKA,GAAKe,MAAO,KAAKR,MAAOA,EAAMD,aAAa,GAG5F8B,EAAOtC,GAAO+C,EAGlB,OAAOT,KAIX,mBAAOW,EAAP,KAAgBC,EAAhB,KAqEA,MAAO,CAACD,EAlEU,SAACE,EAAsBpC,GACrC,IAAMqC,GAAa,IAAIjB,OAAuBF,OAAOgB,GACrD,GAA8B,OAA3BlC,EAAKC,YAAYC,MAChB,MAAMoB,MAAM,uCAEX,GAAa,OAAVc,EACJ,OAAO,KAEXC,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAQkC,EAAMlC,MACvFmC,EAAWD,EAAMpD,SAASC,KAAKmD,EAAMpD,SAASG,KAAKe,MAAQ,KACvC,OAAjBF,EAAKsC,UACJD,EAAWrC,EAAKsC,QAAQtD,SAASC,KAAKe,EAAKsC,QAAQtD,SAASG,KAAKe,MAAQ,MAXzB,oBAanCmC,GAbmC,IAapD,IAAI,EAAJ,qBAA4B,CAAC,IAAD,EAAlBpD,EAAkB,sBACJA,GADI,IACxB,IAAI,EAAJ,qBAAwB,QACbQ,aAAc,EAFD,gCAbwB,+BAkBf,IAAlCO,EAAKC,YAAYjB,SAASC,KAAiH,QAAnGoD,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAgBR,OAAqB2C,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAgBG,QAGxM,IAAlCL,EAAKC,YAAYjB,SAASC,KAAiH,UAAnGoD,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAgBR,OAAuB2C,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAgBG,QAFpPgC,EAAWrC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKe,MAAgBG,MAAO,GAKrG,IAAIkC,GAAc,EACdC,GAAgB,EACpBL,EAAcE,GA1BsC,oBA2BnCA,GA3BmC,IA2BpD,IAAI,EAAJ,qBAA4B,CAAC,IAAD,EAAlBpD,EAAkB,sBACJA,GADI,yBACdF,EADc,QAEpB,GAAGA,EAAOmB,MAAM,CACZ,IAAIZ,EAAQ,IAAI8B,OAEhB9B,GADAA,EAAQA,EAAM4B,OAAOW,EAAwB9C,EAAOsD,KACtCnB,OAAOQ,EAAuB3C,EAAOsD,GAAYV,QAAO,SAACc,GACnE,OAAOZ,EAAwBY,EAAYJ,EAAYtD,EAAOmB,OAAiBX,OAAS,OAEnFA,OAAS,GAA4B,QAAvBR,EAAOmB,MAAMR,MAChC6C,GAAc,EAEVjD,EAAMC,OAAS,IACnBiD,GAAgB,KAX5B,IAAI,EAAJ,qBAAyB,IADD,gCA3BwB,8BA4CpD,IAAIjB,EAAyC,KAU7C,OATIgB,GAAgBC,EAGXD,EAGAC,IACLjB,EAAS,OAHTA,EAAS,QAHTA,EAAS,MAQNA,GAImB,SAACmB,EAA6BC,GACxD,IAD+E,EACzEN,GAAa,IAAIjB,OAAuBF,OAAOgB,GAD0B,cAE3DQ,GAF2D,IAE/E,IAAI,EAAJ,qBAAkC,CAAC,IAAzB3D,EAAwB,QAC9BsD,EAAWtD,EAAOC,SAASC,KAAKF,EAAOC,SAASG,KAAKM,YAAckD,GAHQ,8BAK/ER,EAAcE,KDbkCO,GAApD,mBAAOV,EAAP,KAAgB/B,EAAhB,KAA2B0C,EAA3B,KACA,EAA4Cd,mBAAwB,MAApE,mBAAOe,EAAP,KAAuBC,EAAvB,KACA,EAAgChB,oBAAS,GAAzC,mBAAOpB,EAAP,KAAiBqC,EAAjB,KACA,EAAsCjB,oBAAS,GAA/C,mBAAOkB,EAAP,KAAoBC,EAApB,KACA,EAAqCnB,mBAAuB,MAA5D,mBAAO3B,EAAP,KAAsBN,EAAtB,KACA,EAA4CiC,mBAAwB,MAApE,mBAAO7C,EAAP,KAAuBiE,EAAvB,KACA,EAA4BpB,mBAAyC,MAArE,mBAAOqB,EAAP,KAAeC,EAAf,KACMxD,EAAe,SAAC+B,GAElB,IADA,IAAI0B,EAAa,IAAIlC,MAAc,IAC3BmC,EAAI,EAAEA,EAAI,GAAGA,IACjBD,EAAWC,GAAKrB,EAAQsB,KAAKC,MAAMF,EAAE,IAAIA,EAAI,GAEjDV,EAAsBS,GAAW,GACjCP,EAAkBnB,IAEhBnB,EAAU,SAACiD,GACbV,GAAaU,GACbR,GAAe,GACfrD,EAAa,MACbsD,EAAkB,MAClBrD,EAAY,MAEZ,IADA,IAAIwD,EAAa,IAAIlC,MAAc,IAC3BmC,EAAI,EAAEA,EAAI,GAAGA,IACjBD,EAAWC,GAAKrB,EAAQsB,KAAKC,MAAMF,EAAE,IAAIA,EAAI,GAEjDV,EAAsBS,GAAW,IAEjChE,EAAQ,IAAI8B,MAChB,GAAsB,OAAnB0B,GAA6C,OAAlB1C,GAA6C,OAAnBlB,EAyBpD,IAtBG+D,GAAeH,EAAe5C,QAAUE,KACvCd,EAAQA,EAAM4B,OAAOW,EAAwBiB,EAAeZ,EAAQ9B,GAAeuD,KAAI,SAAC5E,GACpF,MAAO,CAACkB,YAAalB,EAAOuD,QAAUQ,EAAe5C,MAAgBR,QAAUU,EAAcV,MAAQoD,EAAiB,KAAMtC,SAAUsC,EAAe5C,QAAUE,OAC/JuB,QAAO,SAAC3B,GACR,OAAOA,EAAKC,YAAYjB,SAASC,MAAQC,EAAeF,SAASC,KAAOe,EAAKC,YAAYjB,SAASG,MAAQD,EAAeF,SAASG,QAGvI2D,EAAe5C,QAAUE,GAA0C,OAAzB0C,EAAe5C,QAExDZ,EAAQA,EAAM4B,OAAOQ,EAAuBoB,EAAeZ,EAAQ9B,GAAeuB,QAAO,SAACC,GACtF,OAAQC,EAAwBD,EAAGM,EAAQ9B,GAAgBuB,QAAO,SAACiC,GAC/D,OAAOA,EAAM5E,SAASC,MAAQ6D,EAAe9D,SAASC,KAAO2E,EAAM5E,SAASG,MAAQ2D,EAAe9D,SAASG,OAC7GI,OAAS,KACboE,KAAI,SAACE,GACA,MAAO,CAAC5D,YAAa4D,EAAMvB,QAAS,KAAM9B,UAAU,QAQ5C,IAAjBlB,EAAMC,QAAgB0D,EACrBE,EAAkB,MAClBtD,EAAa,MACbC,EAAY,WAEX,GAAoB,IAAjBR,EAAMC,OACVkB,EAAQE,OAER,CAAC,IAAD,gBACkBrB,GADlB,IACA,IAAI,EAAJ,qBAAwB,CAAC,IAAfU,EAAc,QAChBkC,EAAQlC,EAAKC,YAAYjB,SAASC,KAAKe,EAAKC,YAAYjB,SAASG,KAAKM,aACtEoD,EAAsB,CAAC7C,EAAKC,cAAa,IAHjD,+BAQJ,OACA,qCACA,4BAAKmD,EAAD,UAAwDA,EAAxD,UAAUzC,EAAW,aAAe,iBACxC,qBAAKnB,UAAU,YAAf,SACC0C,EAAQyB,KAAI,SAAC1E,EAAc6E,GACxB,OACQ,qBAAK,cAAY,eAAetE,UAAU,YAA1C,SACKP,EAAI0E,KAAI,SAAC5E,EAAeI,GACrB,IAAIoC,EAAsB,CACtBxC,OAAQmD,EAAQ4B,GAAU3E,GAC1BwB,SAAUA,EACVrB,MAAOA,EACPO,aAAcA,EACdM,UAAW,SAACH,GAAgBqD,EAAUlD,EAAUjB,EAAec,KAC/DZ,UAAW6D,EACXlD,aAAcmD,EACdpD,YAAaA,EACbM,cAAeA,EACflB,eAAgBA,EAChBU,qBAAsBuD,EACtB1C,QAAS,WAAOA,EAAQE,IACxBC,MAAO,8BAGX,OAAoB,OAAjB7B,EAAOmB,OAAyC,UAAvBnB,EAAOmB,MAAMR,OACrC6B,EAAOX,MAAQ,sBAAMpB,UAAU,QAAQ,cAAY,cAApC,SAAmDT,EAAOmB,MAAMG,KAAO,IAAM,KACrFzB,EAAe2C,IAED,OAAjBxC,EAAOmB,OAAyC,QAAvBnB,EAAOmB,MAAMR,OAC1C6B,EAAOX,MAAQ,sBAAMpB,UAAU,YAAY,cAAY,YAAxC,SAAqDT,EAAOmB,MAAMG,KAAO,IAAM,KACvFzB,EAAe2C,IAEnB3C,EAAe2C,OA1B6BuC,WE1JxE,SAASC,EAAkBlF,GAC9B,OACI,oCACI,cAACiD,EAAD,IACA,mCACI,4BAAG,mBAAGkC,KAAK,4CAAR,wBACH,4BAAG,mBAAGA,KAAK,2CAAR,mCACH,4BAAG,mBAAGA,KAAK,4CAAR,qCCLJC,MANf,WACE,OACE,cAACF,EAAD,KCSWG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9edff10f.chunk.js","sourcesContent":["import {Piece, Square, Move} from \"./CheckersBoard\"\r\nexport interface SquareProps {\r\n    square: Square\r\n    redsTurn: boolean\r\n    moves: Array<Move>\r\n    selectSquare: (square: Square | null) => void\r\n    movePiece: (move: Move) => void\r\n    firstMove: boolean\r\n    setFirstMove: (firstMove: boolean) => void\r\n    selectPiece: (piece: Piece | null) => void\r\n    selectStartingSquare: (square: Square | null) => void\r\n    selectedPiece: Piece | null\r\n    startingSquare: Square | null\r\n    endTurn: () => void\r\n    child: JSX.Element\r\n}\r\n\r\nexport function CheckersSquare(props: SquareProps){\r\n    const deselect = props.square.position.row === props.startingSquare?.position.row && props.square.position.col === props.startingSquare?.position.col && props.firstMove\r\n    const moving: boolean = props.moves.length > 0\r\n    const onClick = () => {\r\n        if(deselect){\r\n            props.selectStartingSquare(null);\r\n            props.selectSquare(null);\r\n            props.selectPiece(null);\r\n            props.setFirstMove(true);\r\n        }\r\n        else if(moving){\r\n            for(const move of props.moves){\r\n                if(move.destination.position.row === props.square.position.row && move.destination.position.col === props.square.position.col){\r\n                    if(move.destination.piece === null){\r\n                        props.movePiece(move);\r\n                        props.setFirstMove(false);\r\n                        if(move.destination.position.row === 0 && (props.selectedPiece as Piece).color === \"red\" && !(props.selectedPiece as Piece).king){\r\n                            const newPiece = {color: (\"red\" as \"black\" | \"red\"),king: true}\r\n                            const newSquare = {position: move.destination.position, color: move.destination.color, highlighted: move.destination.highlighted, piece: newPiece} \r\n                            props.selectStartingSquare(newSquare)\r\n                            props.selectPiece(newPiece); \r\n                            props.selectSquare(newSquare) \r\n                        }\r\n                        else if(move.destination.position.row === 7 && (props.selectedPiece as Piece).color === \"black\" && !(props.selectedPiece as Piece).king){\r\n                            const newPiece = {color: (\"black\" as \"black\" | \"red\"),king: true}\r\n                            const newSquare = {position: move.destination.position, color: move.destination.color, highlighted: move.destination.highlighted, piece: newPiece} \r\n                            props.selectStartingSquare(newSquare)\r\n                            props.selectPiece(newPiece); \r\n                            props.selectSquare(newSquare) \r\n                        }\r\n                        else{\r\n                            props.selectSquare(move.destination);\r\n                            props.selectStartingSquare(move.destination)\r\n                        }\r\n                        if(move.endsTurn){\r\n                            props.endTurn();\r\n                        }\r\n                        \r\n                    }\r\n                    else{\r\n                        props.selectSquare(props.square)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            props.selectStartingSquare(props.square);\r\n            props.selectSquare(props.square);\r\n            props.selectPiece(props.square.piece)\r\n        }\r\n    }\r\n    return (\r\n            <button data-testid=\"checkers-square\" className={props.square.highlighted ? \"square highlighted\" : props.square.color === \"black\" ? \"square dark\" : \"square\"} onClick={onClick} disabled={moving ? !deselect && !props.square.highlighted : !(props.square.piece !== null && ((props.redsTurn && props.square.piece.color === \"red\") || (!props.redsTurn && props.square.piece.color === \"black\")))} key={props.square.position.col}>{props.child}</button>\r\n    )\r\n\r\n}","import {useState} from 'react'\r\nimport { useSquares } from '../hooks/UseSquares'\r\nimport { CheckersSquare, SquareProps } from './CheckersSquare';\r\nexport interface Position {\r\n    row: number,\r\n    col: number\r\n}\r\n\r\n//red pieces are on the bottom, black are on the top. Top row is zero, bottom row is 7.\r\nexport interface Piece {\r\n    color: \"black\" | \"red\"\r\n    king: boolean\r\n}\r\n\r\nexport interface Square{\r\n    piece: Piece | null\r\n    color: \"white\" | \"black\"\r\n    highlighted: boolean,\r\n    position: Position\r\n}\r\n\r\nexport interface Move {\r\n    deletes: Square | null\r\n    destination: Square\r\n    endsTurn: boolean\r\n}\r\n\r\ninterface NoProps {\r\n\r\n}\r\n\r\n\r\nfunction getAdjacentSquares(square: Square, board: Array<Array<Square>>, piece?: Piece): Array<Square>{\r\n    const up = [{row: square.position.row-1,col:square.position.col-1},{row:square.position.row-1,col:square.position.col+1}];\r\n    const down = [{row: square.position.row+1,col:square.position.col-1},{row:square.position.row+1,col: square.position.col+1}]\r\n    const upanddown = up.concat(down)\r\n    let sqs = new Array<Position>();\r\n    if(piece === undefined && square.piece === null){\r\n        throw Error(\"No piece to get targets of!\")\r\n    }\r\n    else if(piece === undefined){\r\n        piece = (square.piece as Piece);\r\n    }\r\n    let output = new Array<Square>();\r\n    if(piece.king){\r\n        sqs = upanddown\r\n    }\r\n    else if(piece.color === \"red\"){\r\n        sqs = up\r\n    }\r\n    else{\r\n        sqs = down\r\n    }\r\n    for(const pos of sqs){\r\n        if(pos.row >= 0 && pos.row <= 7 && pos.col >= 0 && pos.col <= 7){\r\n            output.push(board[pos.row][pos.col]);\r\n        }\r\n    }\r\n    return output;\r\n}\r\n\r\nexport function getAdjacentEnemyPieces(square: Square | null,board: Array<Array<Square>>,piece?: Piece): Array<Square>{\r\n    if(square === null){\r\n        return [];\r\n    }\r\n    else if(square.piece === null && piece === undefined){\r\n        throw Error(\"No piece to move!\")\r\n    }\r\n    else if(piece === undefined){\r\n        piece = (square.piece as Piece);\r\n    }\r\n    return getAdjacentSquares(square,board,piece).filter((sq: Square) => {\r\n        return sq.piece !== null && sq.piece.color !== (piece as Piece).color\r\n    })\r\n}\r\n\r\nexport function getAdjacentEmptySquares(square: Square | null, board: Array<Array<Square>>,piece?: Piece): Array<Square>{\r\n    if(square == null || square.piece === null){\r\n        return [];\r\n    }\r\n    return getAdjacentSquares(square,board,piece).filter((sq: Square) => {\r\n        return sq.piece === null;\r\n    })\r\n}\r\n\r\nexport function CheckersBoard(props: NoProps){\r\n    const [squares, movePiece, setSquaresHighlighted] = useSquares();\r\n    const [selectedSquare, setSelectedSquare] = useState<Square | null>(null);\r\n    const [redsTurn, setRedsTurn] = useState(true);\r\n    const [isFirstMove, setIsFirstMove] = useState(true);\r\n    const [selectedPiece, selectPiece] = useState<Piece | null>(null)\r\n    const [startingSquare, setStartingSquare] = useState<Square | null>(null);\r\n    const [winner, setWinner] = useState<\"red\" | \"black\" | \"tie\" | null>(null);\r\n    const selectSquare = (sq: Square | null) => {\r\n        let allSquares = new Array<Square>(64);\r\n        for(let i = 0;i < 64;i++){\r\n            allSquares[i] = squares[Math.floor(i/8)][i % 8]\r\n        }\r\n        setSquaresHighlighted(allSquares,false);\r\n        setSelectedSquare(sq);\r\n    }\r\n    const endTurn = (redTurn: boolean) => {\r\n        setRedsTurn(!redTurn);\r\n        setIsFirstMove(true);\r\n        selectSquare(null);\r\n        setStartingSquare(null)\r\n        selectPiece(null);\r\n        let allSquares = new Array<Square>(64);\r\n        for(let i = 0;i < 64;i++){\r\n            allSquares[i] = squares[Math.floor(i/8)][i % 8]\r\n        }\r\n        setSquaresHighlighted(allSquares,false);\r\n    }\r\n    let moves = new Array<Move>();\r\n    if(selectedSquare !== null && selectedPiece !== null && startingSquare !== null){\r\n\r\n        //if this is the first move of the turn, allow moving into nearby empty spaces.\r\n        if(isFirstMove || selectedSquare.piece !== selectedPiece){\r\n            moves = moves.concat(getAdjacentEmptySquares(selectedSquare,squares,selectedPiece).map((square :Square) => {\r\n                return {destination: square,deletes: (selectedSquare.piece as Piece).color !== selectedPiece.color ? selectedSquare : null, endsTurn: selectedSquare.piece === selectedPiece}\r\n            })).filter((move: Move) => {\r\n                return move.destination.position.row !== startingSquare.position.row || move.destination.position.col !== startingSquare.position.col\r\n            })\r\n        }\r\n        if(selectedSquare.piece === selectedPiece || selectedSquare.piece === null){\r\n            //Add any squares that kill nearby enemies.\r\n            moves = moves.concat(getAdjacentEnemyPieces(selectedSquare,squares,selectedPiece).filter((sq: Square) => {\r\n                return (getAdjacentEmptySquares(sq,squares,selectedPiece)).filter((empty: Square) => {\r\n                    return empty.position.row !== selectedSquare.position.row || empty.position.col !== selectedSquare.position.col;\r\n                }).length > 0\r\n            }).map((place: Square) => {\r\n                    return {destination: place,deletes: null, endsTurn: false}\r\n            }));\r\n        }\r\n\r\n\r\n        \r\n        //Currently breaks in a case where two different moves have the same destination; instead of highlighting destinations, it should highlight the piece to delete then let you select a square from that piece.\r\n        //If no moves can be made, the other player gets their turn.\r\n        if(moves.length === 0 && isFirstMove){\r\n            setStartingSquare(null);\r\n            selectSquare(null);\r\n            selectPiece(null);\r\n        }\r\n        else if(moves.length === 0){\r\n            endTurn(redsTurn);\r\n        }\r\n        else{\r\n            for(const move of moves){\r\n                if(!squares[move.destination.position.row][move.destination.position.col].highlighted){\r\n                    setSquaresHighlighted([move.destination],true)  \r\n                }\r\n            }\r\n        }\r\n    }\r\n        return (\r\n        <>\r\n        <p>{!winner ? redsTurn ? \"red's turn\" : \"black's turn\" : `${winner} wins!`}</p>\r\n        <div className=\"container\">\r\n        {squares.map((row: Square[],rowIndex: number) => {\r\n            return (\r\n                    <div data-testid=\"checkers-row\" className=\"board-row\" key={rowIndex}>\r\n                        {row.map((square: Square,col: number) => {\r\n                            let output: SquareProps = {\r\n                                square: squares[rowIndex][col],\r\n                                redsTurn: redsTurn,\r\n                                moves: moves,\r\n                                selectSquare: selectSquare,\r\n                                movePiece: (move: Move) => {setWinner(movePiece(startingSquare,move))},\r\n                                firstMove: isFirstMove,\r\n                                setFirstMove: setIsFirstMove,\r\n                                selectPiece: selectPiece,\r\n                                selectedPiece: selectedPiece,\r\n                                startingSquare: startingSquare,\r\n                                selectStartingSquare: setStartingSquare,\r\n                                endTurn: () => {endTurn(redsTurn)},\r\n                                child: <></>    \r\n                            }\r\n    \r\n                            if(square.piece !== null && square.piece.color === \"black\"){\r\n                                output.child = <span className=\"piece\" data-testid=\"black-piece\">{square.piece.king ? \"*\" : \"\"}</span>\r\n                                return CheckersSquare(output);\r\n                            }\r\n                            else if(square.piece !== null && square.piece.color === \"red\"){\r\n                                output.child = <span className=\"piece red\" data-testid=\"red-piece\">{square.piece.king ? \"*\" : \"\"}</span>\r\n                                return CheckersSquare(output);\r\n                            }\r\n                            return CheckersSquare(output);\r\n    \r\n                        })\r\n                    }\r\n                </div>\r\n                )\r\n            })}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n\r\n","import {useState} from 'react'\r\nimport {Move, Piece, Square, getAdjacentEmptySquares, getAdjacentEnemyPieces} from \"../components/CheckersBoard\"\r\n\r\nexport function useSquares(): [Array<Array<Square>>,(square: Square | null,move: Move) => \"red\" | \"black\" | \"tie\" | null,(squares: Array<Square>,highlight: boolean) => void]{\r\n\r\n    const newBoard = () => {\r\n        let output = new Array<Array<Square>>(8);\r\n        \r\n        for(let row = 0;row < 8;row++){\r\n            let newRow = new Array<Square>(8);\r\n            for(let col = 0;col < 8;col++){\r\n                let color: \"black\" | \"white\" = row % 2 !== col % 2 ? \"black\" : \"white\"\r\n                let pieceColor: \"black\" | \"red\" = \"red\"\r\n                if(row < 3){\r\n                    pieceColor = \"black\";\r\n                    let piece = color === \"black\" ? {color: pieceColor, king: false} : null;\r\n                    newRow[col] = ({position: {row: row,col: col},piece: piece,color: color,highlighted: false});\r\n                }\r\n                else if(row > 4){\r\n                    let piece = color === \"black\" ? {color: pieceColor, king: false} : null;\r\n                    newRow[col] = ({position: {row: row,col: col},piece: piece,color: color,highlighted: false});\r\n                }\r\n                else{\r\n                    newRow[col] = ({position: {row: row,col: col},piece: null,color: color,highlighted: false});\r\n                }\r\n            }\r\n            output[row] = newRow;\r\n        }\r\n        \r\n        return output;\r\n    }\r\n    \r\n\r\n    const [squares, updateSquares] = useState(newBoard);\r\n\r\n\r\n    const movePiece = (start: Square | null, move: Move) => {\r\n        const newSquares = new Array<Array<Square>>().concat(squares);\r\n        if(move.destination.piece !== null){\r\n            throw Error(\"Tried to move to an occupied space!\")\r\n        }\r\n        else if(start === null){\r\n            return null;\r\n        }\r\n        newSquares[move.destination.position.row][move.destination.position.col].piece = start.piece;\r\n        newSquares[start.position.row][start.position.col].piece = null;\r\n        if(move.deletes !== null){\r\n            newSquares[move.deletes.position.row][move.deletes.position.col].piece = null;\r\n        }\r\n        for(const row of newSquares){\r\n            for(const square of row){\r\n                square.highlighted = false;\r\n            }\r\n        }\r\n        if(move.destination.position.row === 0 && (newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).color === \"red\" && !(newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).king){\r\n            (newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).king = true;\r\n        }\r\n        else if(move.destination.position.row === 7 && (newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).color === \"black\" && !(newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).king){\r\n            (newSquares[move.destination.position.row][move.destination.position.col].piece as Piece).king = true;\r\n        }\r\n        let redscanmove = false;\r\n        let blackscanmove = false;\r\n        updateSquares(newSquares);\r\n        for(const row of newSquares){\r\n            for(const square of row){\r\n                if(square.piece){\r\n                    let moves = new Array<Square>();\r\n                    moves = moves.concat(getAdjacentEmptySquares(square,newSquares))\r\n                    moves = moves.concat(getAdjacentEnemyPieces(square,newSquares).filter((enemySquare: Square) => {\r\n                        return getAdjacentEmptySquares(enemySquare,newSquares,(square.piece as Piece)).length > 0\r\n                    }))\r\n                    if(moves.length > 0 && square.piece.color === \"red\"){\r\n                        redscanmove = true;\r\n                    }\r\n                    else if(moves.length > 0){\r\n                        blackscanmove = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        let output: \"tie\" | \"red\" | \"black\" | null = null;\r\n        if(!redscanmove && !blackscanmove){\r\n            output = \"tie\";\r\n        }\r\n        else if(!redscanmove){\r\n            output = \"black\";\r\n        }\r\n        else if(!blackscanmove){\r\n            output = \"red\";\r\n        }\r\n        return output;\r\n\r\n    }\r\n    \r\n    const setSquaresHighlighted = (targetSquares: Array<Square>,highlight: boolean) => {\r\n        const newSquares = new Array<Array<Square>>().concat(squares)\r\n        for(const square of targetSquares){\r\n            newSquares[square.position.row][square.position.col].highlighted = highlight;\r\n        }\r\n        updateSquares(newSquares);\r\n    }\r\n\r\n    return [squares, movePiece, setSquaresHighlighted]\r\n\r\n}","\r\nimport { CheckersBoard } from \"./CheckersBoard\";\r\n\r\ninterface noprops {\r\n\r\n}\r\n\r\nexport function CheckersDashboard(props: noprops){\r\n    return (\r\n        <section>\r\n            <CheckersBoard/>\r\n            <footer>\r\n                <p><a href=\"https://lukerd-29-00.github.io/Portfolio/\">Homepage</a></p>\r\n                <p><a href=\"https://github.com/Lukerd-29-00/Checkers\">Checkers repository</a></p>\r\n                <p><a href=\"https://github.com/Lukerd-29-00/Portfolio\">Main repository</a></p>\r\n            </footer>\r\n        </section>\r\n    )\r\n}","import './App.css';\r\nimport { CheckersDashboard } from './Checkers/components/CheckersDashboard';\r\n\r\nfunction App() {\r\n  return (\r\n    <CheckersDashboard/>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}